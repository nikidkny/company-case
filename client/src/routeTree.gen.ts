/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PostsImport } from './routes/posts'
import { Route as EnsemblesImport } from './routes/ensembles'
import { Route as PostsIndexImport } from './routes/posts.index'
import { Route as EnsemblesIndexImport } from './routes/ensembles.index'
import { Route as ProfileProfileIdImport } from './routes/profile.$profileId'
import { Route as PostsPostIdImport } from './routes/posts.$postId'
import { Route as EnsemblesEnsembleIdImport } from './routes/ensembles.$ensembleId'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const PostsRoute = PostsImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRoute,
} as any)

const EnsemblesRoute = EnsemblesImport.update({
  id: '/ensembles',
  path: '/ensembles',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const PostsIndexRoute = PostsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PostsRoute,
} as any)

const EnsemblesIndexRoute = EnsemblesIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => EnsemblesRoute,
} as any)

const ProfileProfileIdRoute = ProfileProfileIdImport.update({
  id: '/profile/$profileId',
  path: '/profile/$profileId',
  getParentRoute: () => rootRoute,
} as any)

const PostsPostIdRoute = PostsPostIdImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => PostsRoute,
} as any)

const EnsemblesEnsembleIdRoute = EnsemblesEnsembleIdImport.update({
  id: '/$ensembleId',
  path: '/$ensembleId',
  getParentRoute: () => EnsemblesRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/ensembles': {
      id: '/ensembles'
      path: '/ensembles'
      fullPath: '/ensembles'
      preLoaderRoute: typeof EnsemblesImport
      parentRoute: typeof rootRoute
    }
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsImport
      parentRoute: typeof rootRoute
    }
    '/ensembles/$ensembleId': {
      id: '/ensembles/$ensembleId'
      path: '/$ensembleId'
      fullPath: '/ensembles/$ensembleId'
      preLoaderRoute: typeof EnsemblesEnsembleIdImport
      parentRoute: typeof EnsemblesImport
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdImport
      parentRoute: typeof PostsImport
    }
    '/profile/$profileId': {
      id: '/profile/$profileId'
      path: '/profile/$profileId'
      fullPath: '/profile/$profileId'
      preLoaderRoute: typeof ProfileProfileIdImport
      parentRoute: typeof rootRoute
    }
    '/ensembles/': {
      id: '/ensembles/'
      path: '/'
      fullPath: '/ensembles/'
      preLoaderRoute: typeof EnsemblesIndexImport
      parentRoute: typeof EnsemblesImport
    }
    '/posts/': {
      id: '/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof PostsIndexImport
      parentRoute: typeof PostsImport
    }
  }
}

// Create and export the route tree

interface EnsemblesRouteChildren {
  EnsemblesEnsembleIdRoute: typeof EnsemblesEnsembleIdRoute
  EnsemblesIndexRoute: typeof EnsemblesIndexRoute
}

const EnsemblesRouteChildren: EnsemblesRouteChildren = {
  EnsemblesEnsembleIdRoute: EnsemblesEnsembleIdRoute,
  EnsemblesIndexRoute: EnsemblesIndexRoute,
}

const EnsemblesRouteWithChildren = EnsemblesRoute._addFileChildren(
  EnsemblesRouteChildren,
)

interface PostsRouteChildren {
  PostsPostIdRoute: typeof PostsPostIdRoute
  PostsIndexRoute: typeof PostsIndexRoute
}

const PostsRouteChildren: PostsRouteChildren = {
  PostsPostIdRoute: PostsPostIdRoute,
  PostsIndexRoute: PostsIndexRoute,
}

const PostsRouteWithChildren = PostsRoute._addFileChildren(PostsRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/ensembles': typeof EnsemblesRouteWithChildren
  '/posts': typeof PostsRouteWithChildren
  '/ensembles/$ensembleId': typeof EnsemblesEnsembleIdRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/profile/$profileId': typeof ProfileProfileIdRoute
  '/ensembles/': typeof EnsemblesIndexRoute
  '/posts/': typeof PostsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/ensembles/$ensembleId': typeof EnsemblesEnsembleIdRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/profile/$profileId': typeof ProfileProfileIdRoute
  '/ensembles': typeof EnsemblesIndexRoute
  '/posts': typeof PostsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/ensembles': typeof EnsemblesRouteWithChildren
  '/posts': typeof PostsRouteWithChildren
  '/ensembles/$ensembleId': typeof EnsemblesEnsembleIdRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/profile/$profileId': typeof ProfileProfileIdRoute
  '/ensembles/': typeof EnsemblesIndexRoute
  '/posts/': typeof PostsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/ensembles'
    | '/posts'
    | '/ensembles/$ensembleId'
    | '/posts/$postId'
    | '/profile/$profileId'
    | '/ensembles/'
    | '/posts/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/ensembles/$ensembleId'
    | '/posts/$postId'
    | '/profile/$profileId'
    | '/ensembles'
    | '/posts'
  id:
    | '__root__'
    | '/'
    | '/ensembles'
    | '/posts'
    | '/ensembles/$ensembleId'
    | '/posts/$postId'
    | '/profile/$profileId'
    | '/ensembles/'
    | '/posts/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  EnsemblesRoute: typeof EnsemblesRouteWithChildren
  PostsRoute: typeof PostsRouteWithChildren
  ProfileProfileIdRoute: typeof ProfileProfileIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  EnsemblesRoute: EnsemblesRouteWithChildren,
  PostsRoute: PostsRouteWithChildren,
  ProfileProfileIdRoute: ProfileProfileIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/ensembles",
        "/posts",
        "/profile/$profileId"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/ensembles": {
      "filePath": "ensembles.tsx",
      "children": [
        "/ensembles/$ensembleId",
        "/ensembles/"
      ]
    },
    "/posts": {
      "filePath": "posts.tsx",
      "children": [
        "/posts/$postId",
        "/posts/"
      ]
    },
    "/ensembles/$ensembleId": {
      "filePath": "ensembles.$ensembleId.tsx",
      "parent": "/ensembles"
    },
    "/posts/$postId": {
      "filePath": "posts.$postId.tsx",
      "parent": "/posts"
    },
    "/profile/$profileId": {
      "filePath": "profile.$profileId.tsx"
    },
    "/ensembles/": {
      "filePath": "ensembles.index.tsx",
      "parent": "/ensembles"
    },
    "/posts/": {
      "filePath": "posts.index.tsx",
      "parent": "/posts"
    }
  }
}
ROUTE_MANIFEST_END */
