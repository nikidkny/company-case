/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const AssetsLazyImport = createFileRoute('/assets')()
const AccountsLazyImport = createFileRoute('/accounts')()
const IndexLazyImport = createFileRoute('/')()
const PostsIndexLazyImport = createFileRoute('/posts/')()
const MusiciansIndexLazyImport = createFileRoute('/musicians/')()
const EnsemblesIndexLazyImport = createFileRoute('/ensembles/')()
const AccountsIndexLazyImport = createFileRoute('/accounts/')()
const PostsPostIdLazyImport = createFileRoute('/posts/$postId')()
const MusiciansUserIdLazyImport = createFileRoute('/musicians/$userId')()
const EnsemblesCreateLazyImport = createFileRoute('/ensembles/create')()
const EnsemblesEnsemblesIdLazyImport = createFileRoute(
  '/ensembles/$ensemblesId',
)()
const ProfileProfileIdIndexLazyImport = createFileRoute(
  '/profile/$profileId/',
)()
const PostsCreateIndexLazyImport = createFileRoute('/posts/create/')()
const ProfileProfileIdSettingsLazyImport = createFileRoute(
  '/profile/$profileId/settings',
)()
const ProfileProfileIdEditLazyImport = createFileRoute(
  '/profile/$profileId/edit',
)()
const PostsCreateEnsemblesIdLazyImport = createFileRoute(
  '/posts/create/$ensemblesId',
)()
const EnsemblesPostsPostIdLazyImport = createFileRoute(
  '/ensembles/posts/$postId',
)()
const ProfileProfileIdInstrumentsAddLazyImport = createFileRoute(
  '/profile/$profileId/instruments/add',
)()

// Create/Update Routes

const AssetsLazyRoute = AssetsLazyImport.update({
  id: '/assets',
  path: '/assets',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/assets.lazy').then((d) => d.Route))

const AccountsLazyRoute = AccountsLazyImport.update({
  id: '/accounts',
  path: '/accounts',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/accounts.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const PostsIndexLazyRoute = PostsIndexLazyImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/posts/index.lazy').then((d) => d.Route))

const MusiciansIndexLazyRoute = MusiciansIndexLazyImport.update({
  id: '/musicians/',
  path: '/musicians/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/musicians/index.lazy').then((d) => d.Route),
)

const EnsemblesIndexLazyRoute = EnsemblesIndexLazyImport.update({
  id: '/ensembles/',
  path: '/ensembles/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/ensembles/index.lazy').then((d) => d.Route),
)

const AccountsIndexLazyRoute = AccountsIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AccountsLazyRoute,
} as any).lazy(() =>
  import('./routes/accounts.index.lazy').then((d) => d.Route),
)

const PostsPostIdLazyRoute = PostsPostIdLazyImport.update({
  id: '/posts/$postId',
  path: '/posts/$postId',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/posts/$postId.lazy').then((d) => d.Route))

const MusiciansUserIdLazyRoute = MusiciansUserIdLazyImport.update({
  id: '/musicians/$userId',
  path: '/musicians/$userId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/musicians/$userId.lazy').then((d) => d.Route),
)

const EnsemblesCreateLazyRoute = EnsemblesCreateLazyImport.update({
  id: '/ensembles/create',
  path: '/ensembles/create',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/ensembles/create.lazy').then((d) => d.Route),
)

const EnsemblesEnsemblesIdLazyRoute = EnsemblesEnsemblesIdLazyImport.update({
  id: '/ensembles/$ensemblesId',
  path: '/ensembles/$ensemblesId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/ensembles/$ensemblesId.lazy').then((d) => d.Route),
)

const ProfileProfileIdIndexLazyRoute = ProfileProfileIdIndexLazyImport.update({
  id: '/profile/$profileId/',
  path: '/profile/$profileId/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/profile/$profileId/index.lazy').then((d) => d.Route),
)

const PostsCreateIndexLazyRoute = PostsCreateIndexLazyImport.update({
  id: '/posts/create/',
  path: '/posts/create/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/posts/create/index.lazy').then((d) => d.Route),
)

const ProfileProfileIdSettingsLazyRoute =
  ProfileProfileIdSettingsLazyImport.update({
    id: '/profile/$profileId/settings',
    path: '/profile/$profileId/settings',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/profile/$profileId/settings.lazy').then((d) => d.Route),
  )

const ProfileProfileIdEditLazyRoute = ProfileProfileIdEditLazyImport.update({
  id: '/profile/$profileId/edit',
  path: '/profile/$profileId/edit',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/profile/$profileId/edit.lazy').then((d) => d.Route),
)

const PostsCreateEnsemblesIdLazyRoute = PostsCreateEnsemblesIdLazyImport.update(
  {
    id: '/posts/create/$ensemblesId',
    path: '/posts/create/$ensemblesId',
    getParentRoute: () => rootRoute,
  } as any,
).lazy(() =>
  import('./routes/posts/create/$ensemblesId.lazy').then((d) => d.Route),
)

const EnsemblesPostsPostIdLazyRoute = EnsemblesPostsPostIdLazyImport.update({
  id: '/ensembles/posts/$postId',
  path: '/ensembles/posts/$postId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/ensembles/posts.$postId.lazy').then((d) => d.Route),
)

const ProfileProfileIdInstrumentsAddLazyRoute =
  ProfileProfileIdInstrumentsAddLazyImport.update({
    id: '/profile/$profileId/instruments/add',
    path: '/profile/$profileId/instruments/add',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/profile/$profileId/instruments.add.lazy').then(
      (d) => d.Route,
    ),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/accounts': {
      id: '/accounts'
      path: '/accounts'
      fullPath: '/accounts'
      preLoaderRoute: typeof AccountsLazyImport
      parentRoute: typeof rootRoute
    }
    '/assets': {
      id: '/assets'
      path: '/assets'
      fullPath: '/assets'
      preLoaderRoute: typeof AssetsLazyImport
      parentRoute: typeof rootRoute
    }
    '/ensembles/$ensemblesId': {
      id: '/ensembles/$ensemblesId'
      path: '/ensembles/$ensemblesId'
      fullPath: '/ensembles/$ensemblesId'
      preLoaderRoute: typeof EnsemblesEnsemblesIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/ensembles/create': {
      id: '/ensembles/create'
      path: '/ensembles/create'
      fullPath: '/ensembles/create'
      preLoaderRoute: typeof EnsemblesCreateLazyImport
      parentRoute: typeof rootRoute
    }
    '/musicians/$userId': {
      id: '/musicians/$userId'
      path: '/musicians/$userId'
      fullPath: '/musicians/$userId'
      preLoaderRoute: typeof MusiciansUserIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/posts/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/accounts/': {
      id: '/accounts/'
      path: '/'
      fullPath: '/accounts/'
      preLoaderRoute: typeof AccountsIndexLazyImport
      parentRoute: typeof AccountsLazyImport
    }
    '/ensembles/': {
      id: '/ensembles/'
      path: '/ensembles'
      fullPath: '/ensembles'
      preLoaderRoute: typeof EnsemblesIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/musicians/': {
      id: '/musicians/'
      path: '/musicians'
      fullPath: '/musicians'
      preLoaderRoute: typeof MusiciansIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/posts/': {
      id: '/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/ensembles/posts/$postId': {
      id: '/ensembles/posts/$postId'
      path: '/ensembles/posts/$postId'
      fullPath: '/ensembles/posts/$postId'
      preLoaderRoute: typeof EnsemblesPostsPostIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/posts/create/$ensemblesId': {
      id: '/posts/create/$ensemblesId'
      path: '/posts/create/$ensemblesId'
      fullPath: '/posts/create/$ensemblesId'
      preLoaderRoute: typeof PostsCreateEnsemblesIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/profile/$profileId/edit': {
      id: '/profile/$profileId/edit'
      path: '/profile/$profileId/edit'
      fullPath: '/profile/$profileId/edit'
      preLoaderRoute: typeof ProfileProfileIdEditLazyImport
      parentRoute: typeof rootRoute
    }
    '/profile/$profileId/settings': {
      id: '/profile/$profileId/settings'
      path: '/profile/$profileId/settings'
      fullPath: '/profile/$profileId/settings'
      preLoaderRoute: typeof ProfileProfileIdSettingsLazyImport
      parentRoute: typeof rootRoute
    }
    '/posts/create/': {
      id: '/posts/create/'
      path: '/posts/create'
      fullPath: '/posts/create'
      preLoaderRoute: typeof PostsCreateIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/profile/$profileId/': {
      id: '/profile/$profileId/'
      path: '/profile/$profileId'
      fullPath: '/profile/$profileId'
      preLoaderRoute: typeof ProfileProfileIdIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/profile/$profileId/instruments/add': {
      id: '/profile/$profileId/instruments/add'
      path: '/profile/$profileId/instruments/add'
      fullPath: '/profile/$profileId/instruments/add'
      preLoaderRoute: typeof ProfileProfileIdInstrumentsAddLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface AccountsLazyRouteChildren {
  AccountsIndexLazyRoute: typeof AccountsIndexLazyRoute
}

const AccountsLazyRouteChildren: AccountsLazyRouteChildren = {
  AccountsIndexLazyRoute: AccountsIndexLazyRoute,
}

const AccountsLazyRouteWithChildren = AccountsLazyRoute._addFileChildren(
  AccountsLazyRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/accounts': typeof AccountsLazyRouteWithChildren
  '/assets': typeof AssetsLazyRoute
  '/ensembles/$ensemblesId': typeof EnsemblesEnsemblesIdLazyRoute
  '/ensembles/create': typeof EnsemblesCreateLazyRoute
  '/musicians/$userId': typeof MusiciansUserIdLazyRoute
  '/posts/$postId': typeof PostsPostIdLazyRoute
  '/accounts/': typeof AccountsIndexLazyRoute
  '/ensembles': typeof EnsemblesIndexLazyRoute
  '/musicians': typeof MusiciansIndexLazyRoute
  '/posts': typeof PostsIndexLazyRoute
  '/ensembles/posts/$postId': typeof EnsemblesPostsPostIdLazyRoute
  '/posts/create/$ensemblesId': typeof PostsCreateEnsemblesIdLazyRoute
  '/profile/$profileId/edit': typeof ProfileProfileIdEditLazyRoute
  '/profile/$profileId/settings': typeof ProfileProfileIdSettingsLazyRoute
  '/posts/create': typeof PostsCreateIndexLazyRoute
  '/profile/$profileId': typeof ProfileProfileIdIndexLazyRoute
  '/profile/$profileId/instruments/add': typeof ProfileProfileIdInstrumentsAddLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/assets': typeof AssetsLazyRoute
  '/ensembles/$ensemblesId': typeof EnsemblesEnsemblesIdLazyRoute
  '/ensembles/create': typeof EnsemblesCreateLazyRoute
  '/musicians/$userId': typeof MusiciansUserIdLazyRoute
  '/posts/$postId': typeof PostsPostIdLazyRoute
  '/accounts': typeof AccountsIndexLazyRoute
  '/ensembles': typeof EnsemblesIndexLazyRoute
  '/musicians': typeof MusiciansIndexLazyRoute
  '/posts': typeof PostsIndexLazyRoute
  '/ensembles/posts/$postId': typeof EnsemblesPostsPostIdLazyRoute
  '/posts/create/$ensemblesId': typeof PostsCreateEnsemblesIdLazyRoute
  '/profile/$profileId/edit': typeof ProfileProfileIdEditLazyRoute
  '/profile/$profileId/settings': typeof ProfileProfileIdSettingsLazyRoute
  '/posts/create': typeof PostsCreateIndexLazyRoute
  '/profile/$profileId': typeof ProfileProfileIdIndexLazyRoute
  '/profile/$profileId/instruments/add': typeof ProfileProfileIdInstrumentsAddLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/accounts': typeof AccountsLazyRouteWithChildren
  '/assets': typeof AssetsLazyRoute
  '/ensembles/$ensemblesId': typeof EnsemblesEnsemblesIdLazyRoute
  '/ensembles/create': typeof EnsemblesCreateLazyRoute
  '/musicians/$userId': typeof MusiciansUserIdLazyRoute
  '/posts/$postId': typeof PostsPostIdLazyRoute
  '/accounts/': typeof AccountsIndexLazyRoute
  '/ensembles/': typeof EnsemblesIndexLazyRoute
  '/musicians/': typeof MusiciansIndexLazyRoute
  '/posts/': typeof PostsIndexLazyRoute
  '/ensembles/posts/$postId': typeof EnsemblesPostsPostIdLazyRoute
  '/posts/create/$ensemblesId': typeof PostsCreateEnsemblesIdLazyRoute
  '/profile/$profileId/edit': typeof ProfileProfileIdEditLazyRoute
  '/profile/$profileId/settings': typeof ProfileProfileIdSettingsLazyRoute
  '/posts/create/': typeof PostsCreateIndexLazyRoute
  '/profile/$profileId/': typeof ProfileProfileIdIndexLazyRoute
  '/profile/$profileId/instruments/add': typeof ProfileProfileIdInstrumentsAddLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/accounts'
    | '/assets'
    | '/ensembles/$ensemblesId'
    | '/ensembles/create'
    | '/musicians/$userId'
    | '/posts/$postId'
    | '/accounts/'
    | '/ensembles'
    | '/musicians'
    | '/posts'
    | '/ensembles/posts/$postId'
    | '/posts/create/$ensemblesId'
    | '/profile/$profileId/edit'
    | '/profile/$profileId/settings'
    | '/posts/create'
    | '/profile/$profileId'
    | '/profile/$profileId/instruments/add'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/assets'
    | '/ensembles/$ensemblesId'
    | '/ensembles/create'
    | '/musicians/$userId'
    | '/posts/$postId'
    | '/accounts'
    | '/ensembles'
    | '/musicians'
    | '/posts'
    | '/ensembles/posts/$postId'
    | '/posts/create/$ensemblesId'
    | '/profile/$profileId/edit'
    | '/profile/$profileId/settings'
    | '/posts/create'
    | '/profile/$profileId'
    | '/profile/$profileId/instruments/add'
  id:
    | '__root__'
    | '/'
    | '/accounts'
    | '/assets'
    | '/ensembles/$ensemblesId'
    | '/ensembles/create'
    | '/musicians/$userId'
    | '/posts/$postId'
    | '/accounts/'
    | '/ensembles/'
    | '/musicians/'
    | '/posts/'
    | '/ensembles/posts/$postId'
    | '/posts/create/$ensemblesId'
    | '/profile/$profileId/edit'
    | '/profile/$profileId/settings'
    | '/posts/create/'
    | '/profile/$profileId/'
    | '/profile/$profileId/instruments/add'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AccountsLazyRoute: typeof AccountsLazyRouteWithChildren
  AssetsLazyRoute: typeof AssetsLazyRoute
  EnsemblesEnsemblesIdLazyRoute: typeof EnsemblesEnsemblesIdLazyRoute
  EnsemblesCreateLazyRoute: typeof EnsemblesCreateLazyRoute
  MusiciansUserIdLazyRoute: typeof MusiciansUserIdLazyRoute
  PostsPostIdLazyRoute: typeof PostsPostIdLazyRoute
  EnsemblesIndexLazyRoute: typeof EnsemblesIndexLazyRoute
  MusiciansIndexLazyRoute: typeof MusiciansIndexLazyRoute
  PostsIndexLazyRoute: typeof PostsIndexLazyRoute
  EnsemblesPostsPostIdLazyRoute: typeof EnsemblesPostsPostIdLazyRoute
  PostsCreateEnsemblesIdLazyRoute: typeof PostsCreateEnsemblesIdLazyRoute
  ProfileProfileIdEditLazyRoute: typeof ProfileProfileIdEditLazyRoute
  ProfileProfileIdSettingsLazyRoute: typeof ProfileProfileIdSettingsLazyRoute
  PostsCreateIndexLazyRoute: typeof PostsCreateIndexLazyRoute
  ProfileProfileIdIndexLazyRoute: typeof ProfileProfileIdIndexLazyRoute
  ProfileProfileIdInstrumentsAddLazyRoute: typeof ProfileProfileIdInstrumentsAddLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AccountsLazyRoute: AccountsLazyRouteWithChildren,
  AssetsLazyRoute: AssetsLazyRoute,
  EnsemblesEnsemblesIdLazyRoute: EnsemblesEnsemblesIdLazyRoute,
  EnsemblesCreateLazyRoute: EnsemblesCreateLazyRoute,
  MusiciansUserIdLazyRoute: MusiciansUserIdLazyRoute,
  PostsPostIdLazyRoute: PostsPostIdLazyRoute,
  EnsemblesIndexLazyRoute: EnsemblesIndexLazyRoute,
  MusiciansIndexLazyRoute: MusiciansIndexLazyRoute,
  PostsIndexLazyRoute: PostsIndexLazyRoute,
  EnsemblesPostsPostIdLazyRoute: EnsemblesPostsPostIdLazyRoute,
  PostsCreateEnsemblesIdLazyRoute: PostsCreateEnsemblesIdLazyRoute,
  ProfileProfileIdEditLazyRoute: ProfileProfileIdEditLazyRoute,
  ProfileProfileIdSettingsLazyRoute: ProfileProfileIdSettingsLazyRoute,
  PostsCreateIndexLazyRoute: PostsCreateIndexLazyRoute,
  ProfileProfileIdIndexLazyRoute: ProfileProfileIdIndexLazyRoute,
  ProfileProfileIdInstrumentsAddLazyRoute:
    ProfileProfileIdInstrumentsAddLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/accounts",
        "/assets",
        "/ensembles/$ensemblesId",
        "/ensembles/create",
        "/musicians/$userId",
        "/posts/$postId",
        "/ensembles/",
        "/musicians/",
        "/posts/",
        "/ensembles/posts/$postId",
        "/posts/create/$ensemblesId",
        "/profile/$profileId/edit",
        "/profile/$profileId/settings",
        "/posts/create/",
        "/profile/$profileId/",
        "/profile/$profileId/instruments/add"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/accounts": {
      "filePath": "accounts.lazy.tsx",
      "children": [
        "/accounts/"
      ]
    },
    "/assets": {
      "filePath": "assets.lazy.tsx"
    },
    "/ensembles/$ensemblesId": {
      "filePath": "ensembles/$ensemblesId.lazy.tsx"
    },
    "/ensembles/create": {
      "filePath": "ensembles/create.lazy.tsx"
    },
    "/musicians/$userId": {
      "filePath": "musicians/$userId.lazy.tsx"
    },
    "/posts/$postId": {
      "filePath": "posts/$postId.lazy.tsx"
    },
    "/accounts/": {
      "filePath": "accounts.index.lazy.tsx",
      "parent": "/accounts"
    },
    "/ensembles/": {
      "filePath": "ensembles/index.lazy.tsx"
    },
    "/musicians/": {
      "filePath": "musicians/index.lazy.tsx"
    },
    "/posts/": {
      "filePath": "posts/index.lazy.tsx"
    },
    "/ensembles/posts/$postId": {
      "filePath": "ensembles/posts.$postId.lazy.tsx"
    },
    "/posts/create/$ensemblesId": {
      "filePath": "posts/create/$ensemblesId.lazy.tsx"
    },
    "/profile/$profileId/edit": {
      "filePath": "profile/$profileId/edit.lazy.tsx"
    },
    "/profile/$profileId/settings": {
      "filePath": "profile/$profileId/settings.lazy.tsx"
    },
    "/posts/create/": {
      "filePath": "posts/create/index.lazy.tsx"
    },
    "/profile/$profileId/": {
      "filePath": "profile/$profileId/index.lazy.tsx"
    },
    "/profile/$profileId/instruments/add": {
      "filePath": "profile/$profileId/instruments.add.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
